<?xml version="1.0" encoding="UTF-8"?>
<project name="build-macros"
  xmlns:antcontrib="urn:net.sf.antcontrib"
  xmlns:dellroad="urn:org.dellroad.ant"
  xmlns:ivy="urn:org.apache.ivy.ant"
  xmlns:testng="urn:org.testng"
  xmlns:cobertura="urn:net.sf.cobertura"
  xmlns:findbugs="urn:edu.umd.cs.findbugs"
  xmlns:checkstyle="urn:net.sf.checkstyle">

<!--
    Instructions for includers of this file:

    - Define "javac.classpath" target finding classes required for javac and unit test compilation
    - Define "unittest.classpath" target finding additional classes required for unit test execution
    - Override "javac.compiler.flags" if desired

-->

    <!-- Project should override this as necessary -->
    <property name="javac.compiler.flags" value=""/>

<!--
        ************* DETERMINE BASE DIRECTORY ****************
-->

    <dirname property="build.macros.dir" file="${ant.file.build-macros}"/>

<!--
        ************* DEFINE ANTCONTRIB AND IVY STUFF ****************
-->

    <!-- Set variables -->
    <property name="data.dir" value="/usr/share"/>

    <!-- Load environment variables as properties with "environ." prefix -->
    <property environment="environ"/>

    <!-- Find ivy.jar; use IVY_JAR environment variable if set, otherwise fall back to default -->
    <condition property="ivy.jar" value="${environ.IVY_JAR}">
        <isset property="environ.IVY_JAR"/>
    </condition>
    <condition property="ivy.jar" value="${data.dir}/java/ivy.jar">
        <not>
            <isset property="environ.IVY_JAR"/>
        </not>
    </condition>
    <fail message="can't find ivy.jar; please install ${data.dir}/java/ivy.jar or set $IVY_JAR">
        <condition>
            <not>
                <available file="${ivy.jar}"/>
            </not>
        </condition>
    </fail>

    <!-- Import ivy tasks -->
    <taskdef uri="urn:org.apache.ivy.ant" resource="org/apache/ivy/ant/antlib.xml" classpath="${ivy.jar}"/>

    <!-- Find ant-contrib.jar; use ANT_CONTRIB_JAR environment variable if set, otherwise fall back to default -->
    <condition property="ant-contrib.jar" value="${env.ANT_CONTRIB_JAR}">
        <isset property="environ.ANT_CONTRIB_JAR"/>
    </condition>
    <condition property="ant-contrib.jar" value="${data.dir}/java/ant-contrib.jar">
        <not>
            <isset property="environ.ANT_CONTRIB_JAR"/>
        </not>
    </condition>
    <fail message="can't find ant-contrib.jar; please install ${data.dir}/java/ant-contrib.jar or set $ANT_CONTRIB_JAR">
        <condition>
            <not>
                <available file="${ant-contrib.jar}"/>
            </not>
        </condition>
    </fail>

    <!-- Import ant-contrib tasks -->
    <taskdef uri="urn:net.sf.antcontrib" resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/>

    <!-- Get the sed(1) 'extended regular expression' flag for this O/S ('-E' for BSDish, '-r' for Linux) -->
    <exec outputproperty="sed.extended.flag" executable="/bin/sh" logError="true" failonerror="true">
        <arg value="-c"/>
        <arg value="case `uname -s` in
            Darwin|*BSD)
                printf '%s' -E;
                ;;
            *)
                printf '%s' -r;
                ;;
            esac"/>
    </exec>

<!--
        ************* IVY CONFIGURATION ****************
-->

    <!--
        Macro for resolving a classpath by naming the module, etc. directly.
        Defines classpath "@{pathid}" and sets property "@{pathid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivymodpath">
        <attribute name="pathid" description="Classpath reference id to define"/>
        <attribute name="org" description="Module organisation name"/>
        <attribute name="mod" description="Module module name"/>
        <attribute name="rev" description="Module revision"/>
        <attribute name="conf" default="default" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachepath settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}" pathid="@{pathid}"/>
            <property name="@{pathid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for resolving a classpath using a named configuration in ivy.xml.
        Defines classpath "@{pathid}" and sets property "@{pathid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivypath">
        <attribute name="pathid" description="Classpath reference id to define"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachepath file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" pathid="@{pathid}"/>
            <property name="@{pathid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for resolving a fileset using a named configuration in ivy.xml.
        Defines fileset "@{setid}" and sets property "@{setid}.resolved".
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyfileset">
        <attribute name="setid" description="Fileset reference id to define"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:cachefileset file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" setid="@{setid}"/>
            <property name="@{setid}.resolved" value="true"/>
        </sequential>
    </macrodef>

    <!--
        Macro for retrieving ivy artifacts using a named configuration in ivy.xml.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyput">
        <attribute name="pattern" description="Ivy pattern for artifact destination"/>
        <attribute name="ivyfile" default="${basedir}/src/ivy/ivy.xml" description="ivy.xml defining the named configuration"/>
        <attribute name="conf" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:retrieve file="@{ivyfile}" settingsRef="@{settingsRef}" type="@{type}"
              transitive="@{transitive}" conf="@{conf}" log="@{log}" pattern="@{pattern}"/>
        </sequential>
    </macrodef>

    <!--
        Macro for retrieving artifacts by naming the module, etc. directly.
        Does not require an ivy.xml file.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivymodget">
        <attribute name="pattern" description="Ivy pattern for artifact destination"/>
        <attribute name="org" description="Module organisation name"/>
        <attribute name="mod" description="Module module name"/>
        <attribute name="rev" description="Module revision"/>
        <attribute name="conf" default="default" description="Name of the ivy configuration to resolve"/>
        <attribute name="type" default="jar" description="Type of artifact to resolve"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <attribute name="transitive" default="true" description="Whether to resolve dependencies transitively"/>
        <attribute name="log" default="download-only" description="When to log activity"/>
        <sequential>
            <ivy:resolve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}"/>
            <ivy:retrieve settingsRef="@{settingsRef}" organisation="@{org}" module="@{mod}" revision="@{rev}"
              type="@{type}" inline="true" transitive="@{transitive}" conf="@{conf}" log="@{log}" pattern="@{pattern}"/>
        </sequential>
    </macrodef>

    <!--
        Macro for generating a resolution report for a given configuration.
        Requires a previous <ivy:resolve> operation.
    -->
    <macrodef uri="urn:org.dellroad.ant" name="ivyreport">
        <attribute name="conf" default="default" description="Name of the ivy configuration to report"/>
        <attribute name="destdir" default="build/reports/ivy" description="Directory in which to put generated reports"/>
        <attribute name="settingsRef" default="build-macros-ivy-settings" description="Reference to ivy settings"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <ivy:report settingsRef="@{settingsRef}" conf="@{conf}" todir="@{destdir}" xml="true" outputpattern="[conf].[ext]"/>
        </sequential>
    </macrodef>

    <!-- Configure Ivy -->
    <antcontrib:if>
        <available file="${basedir}/src/ivy/settings.xml" type="file"/>
        <antcontrib:then>
            <ivy:settings id="build-macros-ivy-settings" file="${basedir}/src/ivy/settings.xml"/>
        </antcontrib:then>
        <antcontrib:elseif>
            <available file="${data.dir}/ivy/settings.xml" type="file"/>
            <antcontrib:then>
                <ivy:settings id="build-macros-ivy-settings" file="${data.dir}/ivy/settings.xml"/>
            </antcontrib:then>
        </antcontrib:elseif>
        <antcontrib:else>
            <ivy:settings id="build-macros-ivy-settings" file="${build.macros.dir}/ivysettings.xml"/>
        </antcontrib:else>
    </antcontrib:if>

<!--
        ************* MACROS AND PRESETDEFS ****************
-->

    <!-- SVN revision -->
    <macrodef uri="urn:org.dellroad.ant" name="svnrevision">
        <attribute name="property" default="svn.revision" description="Name of property to set"/>
        <attribute name="dir" default="${basedir}" description="Target checked-out SVN directory"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/sh" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="svnversion -c @{dir} | sed ${sed.extended.flag} -e 's/^[0-9]+://g' -e 's/^-1M$/0/g'"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- SuSE version -->
    <macrodef uri="urn:org.dellroad.ant" name="suseversion">
        <attribute name="property" description="Name of property to set"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="SREL=`head -1 /etc/SuSE-release`;
                case &quot;$${SREL}&quot; in
                    SUSE\ LINUX\ Enterprise\ Server\ 9\ \(*)
                        echo -n sles9;
                        ;;
                    SUSE\ LINUX\ 10\.0\ \(*)
                        echo -n suse10.0;
                        ;;
                    SUSE\ LINUX\ 10\.1\ \(*)
                        echo -n suse10.1;
                        ;;
                    openSUSE\ [0-9][0-9]\.[0-9]\ \(*)
                        LABEL=`echo &quot;$${SREL}&quot; | sed ${sed.extended.flag} 's|^openSUSE ([0-9]+\.[0-9]+) \(.*$$|\1|g'`;
                        echo -n &quot;$${LABEL}&quot;;
                        ;;
                    *)
                        echo -n unknown;
                        ;;
                esac"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- Check umask -->
    <macrodef uri="urn:org.dellroad.ant" name="checkumask">
        <attribute name="u" default="" description="Required user bits"/>
        <attribute name="g" default="" description="Required group bits"/>
        <attribute name="o" default="" description="Required other bits"/>
        <sequential>
            <exec outputproperty="@{property}" executable="/bin/bash" logError="true" failonerror="true">
                <arg value="-c"/>
                <arg value="
                    set -e;
                    bailout()
                    {
                        echo ERROR: $${1+&quot;$@&quot;} 1>&amp;2;
                        exit 1;
                    };
                    PAT='^u=((r)?(w)?(x)?),g=((r)?(w)?(x)?),o=((r)?(w)?(x)?)$$';
                    UBITS=`umask -S`;
                    echo $${UBITS} | grep -qE &quot;$${PAT}&quot; || bailout failed to parse umask: `umask -S`;
                    [ '@{u}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\1|g'` = '@{u}' ]
                      || bailout umask must have u='@{u}';
                    [ '@{g}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\5|g'` = '@{g}' ]
                      || bailout umask must have g='@{g}';
                    [ '@{o}' = '' -o `echo $${UBITS} | sed ${sed.extended.flag} 's|'&quot;$${PAT}&quot;'|\9|g'` = '@{o}' ]
                      || bailout umask must have o='@{o}';
                "/>
            </exec>
        </sequential>
    </macrodef>

    <!--
        Unit test macro

        Requires:
            path "javac.classpath"
            path "unittest.classpath"
            path "testng.classpath"
            path "cobertura.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="unit-tests">
        <attribute name="testngfile" default="${basedir}/src/test/testng.xml" description="TestNG control file"/>
        <element name="excludes" optional="yes"/>
        <element name="addclasspath" optional="yes"/>
        <element name="testng" optional="yes"/>
        <sequential>

            <!-- Define TestNG and Cobertura ant tasks -->
            <taskdef uri="urn:org.testng"
              resource="testngtasks" classpathref="testng.classpath"/>
            <taskdef uri="urn:net.sf.cobertura"
              resource="tasks.properties" classpathref="cobertura.classpath"/>

            <!-- Instrument Classes -->
            <delete dir="${basedir}/build/cobertura"/>
            <delete dir="${basedir}/build/reports/coverage"/>
            <mkdir dir="${basedir}/build/cobertura/classes"/>
            <mkdir dir="${basedir}/build/reports/coverage"/>
            <cobertura:cobertura-instrument todir="${basedir}/build/cobertura/classes"
              datafile="${basedir}/build/cobertura/cobertura.ser">
                <fileset dir="${basedir}/build/classes">
                    <include name="**/*.class"/>
                    <excludes/>
                </fileset>
            </cobertura:cobertura-instrument>

            <!-- Run tests -->
            <testng:testng outputDir="${basedir}/build/reports/tests" haltOnfailure="true">
                <xmlfileset file="@{testngfile}"/>
                <jvmarg value="-Djava.awt.headless=true"/>
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/build/cobertura/cobertura.ser"/>
                <classpath>
                    <addclasspath/>
                    <pathelement location="${basedir}/build/cobertura/classes"/>
                    <pathelement location="${basedir}/build/classes"/>
                    <pathelement location="${basedir}/build/test"/>
                    <pathelement location="${basedir}/build/resources"/>
                    <path refid="javac.classpath"/>
                    <path refid="unittest.classpath"/>
                    <path refid="cobertura.classpath"/>
                </classpath>
                <testng/>
            </testng:testng>

            <!-- Generate coverage report -->
            <cobertura:cobertura-report format="html" destdir="${basedir}/build/reports/coverage"
              srcdir="${basedir}/src/java" datafile="${basedir}/build/cobertura/cobertura.ser"/>
        </sequential>
    </macrodef>

    <presetdef uri="urn:org.dellroad.ant" name="javac-default">
        <javac includeantruntime="no"
               compiler="modern"
               deprecation="true"
               source="1.6"
               target="1.6"
               debug="true">
            <compilerarg line="${javac.compiler.flags}"/>
        </javac>
    </presetdef>

    <!--
        Javadoc macro

        Requires:
            path "javac.classpath"
        Optional:
            property "javac.compiler.flags"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="javadoc">
        <attribute name="title" default="Java Class Library API"/>
        <element name="links" optional="yes"/>
        <element name="excludes" optional="yes"/>
        <element name="addclasspath" optional="yes"/>
        <sequential>
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src/java">
                        <include name="**/*.java"/>
                        <excludes/>
                    </fileset>
                </sourcefiles>
                <targetfiles path="build/reports/javadoc/index.html"/>
                <sequential>
                    <delete dir="build/reports/javadoc"/>
                    <mkdir dir="build/reports/javadoc"/>
                    <javadoc destdir="build/reports/javadoc" use="true"
                      source="1.5" breakiterator="yes" linksource="true"
                      windowtitle="@{title}" doctitle="@{title}" failonerror="true">
                        <classpath>
                            <addclasspath/>
                            <path refid="javac.classpath"/>
                        </classpath>
                        <packageset dir="src/java" defaultexcludes="yes">
                            <include name="**/*"/>
                            <excludes/>
                        </packageset>
                        <links/>
                    </javadoc>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        Checkstyle macro

        Requires:
            path "javac.classpath"
            path "unittest.classpath"
            path "checkstyle.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="checkstyle">
        <attribute name="config" default="${build.macros.dir}/checkstyle/checkstyle.xml"/>
        <attribute name="style" default="${build.macros.dir}/checkstyle/checkstyle-frames-errors.xsl"/>
        <attribute name="textstyle" default="${build.macros.dir}/checkstyle/checkstyle-text.xsl"/>
        <attribute name="dir" default="${basedir}/build/reports/checkstyle"/>
        <attribute name="title" default="DellRoad.ORG Checkstyle Report"/>
        <attribute name="maxErrors" default="0"/>
        <attribute name="maxWarnings" default="0"/>
        <attribute name="showWarnings" default="true"/>
        <element name="excludes" optional="yes"/>
        <sequential>
            <mkdir dir="@{dir}"/>

            <!-- (Re)run checkstyle if necessary -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src">
                        <include name="**/*.java"/>
                        <exclude name="**/*MBean.java"/>
                        <excludes/>
                    </fileset>
                </sourcefiles>
                <targetfiles path="${dir}/report.xml"/>
                <sequential>

                    <!-- Run checkstyle -->
                    <delete dir="@{dir}"/>
                    <mkdir dir="@{dir}"/>
                    <taskdef uri="urn:net.sf.checkstyle"
                      resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>
                    <checkstyle:checkstyle failOnViolation="false" failureProperty="checkstyle.failed"
                      config="@{config}" maxErrors="@{maxErrors}" maxWarnings="@{maxWarnings}">
                        <property key="checkstyle.cache.file" file="@{dir}/cachefile"/>
                        <formatter type="xml" toFile="@{dir}/report.xml"/>
                        <fileset dir="${basedir}/src">
                            <include name="**/*.java"/>
                            <exclude name="**/*MBean.java"/>
                            <excludes/>
                        </fileset>
                        <classpath>
                            <pathelement location="${basedir}/build/classes"/>
                            <pathelement location="${basedir}/build/test"/>
                            <path refid="javac.classpath"/>
                            <path refid="unittest.classpath"/>
                        </classpath>
                    </checkstyle:checkstyle>

                    <!-- Style XML report -->
                <!--
                    <xslt in="@{dir}/report.xml" out="@{dir}/report.out" style="@{style}">
                        <param name="title" expression="@{title}"/>
                        <param name="filename.strip.prefix" expression="${basedir}/"/>
                    </xslt>
                -->

                    <!-- Output textual version of report -->
                    <antcontrib:if>
                        <isset property="checkstyle.failed"/>
                        <antcontrib:then>
                            <xslt style="@{textstyle}" in="@{dir}/report.xml" out="/dev/stdout">
                                <param name="failed" expression="true"/>
                                <param name="filename.strip.prefix" expression="${basedir}/"/>
                                <param name="show.warnings" expression="@{showWarnings}"/>
                            </xslt>
                            <fail message="checkstyle failed"/>
                        </antcontrib:then>
                        <antcontrib:else>
                            <xslt style="@{textstyle}" in="@{dir}/report.xml" out="/dev/stdout">
                                <param name="failed" expression="false"/>
                                <param name="filename.strip.prefix" expression="${basedir}/"/>
                                <param name="show.warnings" expression="@{showWarnings}"/>
                            </xslt>
                        </antcontrib:else>
                    </antcontrib:if>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        FindBugs macro

        Requires:
            path "findbugs.classpath"
    -->
    <macrodef uri="urn:org.dellroad.ant" name="findbugs">
        <attribute name="dir" description="Output directory" default="${basedir}/build/reports/findbugs"/>
        <attribute name="location" description="Directory where FindBugs is installed"/>
        <attribute name="reportLevel" description="Reporting level: low, medium, high" default="low"/>
        <attribute name="style" description="Report style: plain, default, fancy, fancy-hist, summary" default="default"/>
        <attribute name="effortLevel" description="Effort level: min, default, max" default="default"/>
        <sequential>

            <!-- Verify FindBugs exists -->
            <available file="@{location}" type="dir" property="findbugs.home.exists"/>
            <fail unless="findbugs.home.exists" message="Directory @{location} does not exist"/>

            <!-- Run FindBugs -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="src/java" includes="**/*.java"/>
                </sourcefiles>
                <targetfiles path="@{dir}/report.xml"/>
                <sequential>

                    <!-- Clear out old stuff -->
                    <delete dir="@{dir}"/>
                    <mkdir dir="@{dir}"/>

                    <!-- Define task -->
                    <taskdef uri="urn:edu.umd.cs.findbugs" name="findbugs"
                      classpath="@{location}/lib/findbugs.jar"
                      classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

                    <!-- Generate XML report -->
                    <findbugs:findbugs home="@{location}" outputFile="@{dir}/report.xml"
                      output="xml:withMessages" reportLevel="@{reportLevel}" effort="@{effortLevel}">
                        <auxClasspath refid="findbugs.classpath"/>
                        <sourcePath path="${basedir}/src/java" />
                        <class location="${basedir}/build/classes" />
                    </findbugs:findbugs>
                </sequential>
            </antcontrib:outofdate>

            <!-- Style that into HTML report -->
            <antcontrib:outofdate>
                <sourcefiles>
                    <fileset dir="@{dir}" includes="report.xml"/>
                </sourcefiles>
                <targetfiles path="@{dir}/index.html"/>
                <sequential>
                    <xslt style="@{location}/src/xsl/@{style}.xsl" in="@{dir}/report.xml" out="@{dir}/index.html"/>
                </sequential>
            </antcontrib:outofdate>
        </sequential>
    </macrodef>

    <!--
        Show FindBugs macro
    -->
    <macrodef uri="urn:org.dellroad.ant" name="showbugs">
        <attribute name="dir" description="Output directory" default="${basedir}/build/reports/findbugs"/>
        <attribute name="location" description="Directory where FindBugs is installed"/>
        <sequential>
            <available file="@{dir}/report.xml" type="file" property="findbugs.report.exists"/>
            <fail unless="findbugs.report.exists" message="File @{dir}/report.xml does not exist"/>
            <exec executable="@{location}/bin/findbugs" logError="true" failonerror="true">
                <arg value="-loadbugs"/>
                <arg value="@{dir}/report.xml"/>
                <arg value="-home"/>
                <arg value="@{location}"/>
            </exec>
        </sequential>
    </macrodef>

<!--
        ************* PREDEFINED TARGETS ****************
-->

    <target name="clean" depends="clean-project">
        <delete dir="build"/>
        <delete dir="dist"/>
    </target>
    <target name="clean-project"/>

    <!-- Find TestNG -->
    <target name="testng.classpath" unless="testng.classpath.resolved">
        <dellroad:ivymodpath pathid="testng.classpath" rev="6.+" org="org.testng" mod="testng"/>
        <property name="testng.classpath.resolved" value="true"/>
    </target>

    <!-- Find Cobertura -->
    <target name="cobertura.classpath" unless="cobertura.classpath.resolved">
        <dellroad:ivymodpath pathid="cobertura.classpath" rev="[1.9.3,2.0[" org="net.sourceforge.cobertura" mod="cobertura"/>
        <property name="cobertura.classpath.resolved" value="true"/>
    </target>

    <!-- Find Checkstyle -->
    <target name="checkstyle.classpath" unless="checkstyle.classpath.resolved">
        <dellroad:ivymodpath pathid="checkstyle.classpath" rev="5.4" org="com.puppycrawl" mod="checkstyle"/>
        <property name="checkstyle.classpath.resolved" value="true"/>
    </target>

    <target name="jpamodelgen" depends="javac" unless="jpamodelgen.completed">
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <mkdir dir="build/classes"/>
                <antcontrib:outofdate>
                    <sourcefiles>
                        <fileset dir="src/java">
                            <include name="**/*.java"/>
                            <exclude name="**/package-info.java"/>
                        </fileset>
                    </sourcefiles>
                    <mapper type="glob" dir="src/java" from="*.java" to="build/classes/*.class"/>
                    <sequential>
                        <mkdir dir="build/metamodel"/>
                        <mkdir dir="build/metamodel/META-INF"/>
                        <copy file="src/conf/persistence.xml" todir="build/metamodel/META-INF"/>
                        <dellroad:javac-default srcdir="src/java" destdir="build/metamodel">
                            <classpath>
                                <path refid="javac.classpath"/>
                                <pathelement location="build/metamodel"/>
                            </classpath>
                            <compilerarg line="-proc:only"/>
                        </dellroad:javac-default>
                        <dellroad:javac-default srcdir="build/metamodel" destdir="build/classes">
                            <classpath>
                                <path refid="javac.classpath"/>
                                <pathelement location="build/classes"/>
                            </classpath>
                            <compilerarg line="-proc:none"/>
                        </dellroad:javac-default>
                    </sequential>
                </antcontrib:outofdate>
            </antcontrib:then>
        </antcontrib:if>
        <property name="jpamodelgen.completed" value="true"/>
    </target>

    <target name="javac" depends="javac-project, javac.classpath, testng.classpath" unless="javac.completed">

        <!-- Main classes -->
        <antcontrib:if>
            <available file="src/java" type="dir"/>
            <antcontrib:then>
                <mkdir dir="build/classes"/>
                <antcontrib:outofdate>
                    <sourcefiles>
                        <fileset dir="src/java">
                            <include name="**/*.java"/>
                            <exclude name="**/package-info.java"/>
                        </fileset>
                    </sourcefiles>
                    <mapper type="glob" dir="src/java" from="*.java" to="build/classes/*.class"/>
                    <sequential>
                        <mkdir dir="build/classes"/>
                        <dellroad:javac-default srcdir="src/java" destdir="build/classes">
                            <classpath refid="javac.classpath"/>
                            <compilerarg line="-proc:none"/>
                        </dellroad:javac-default>
                    </sequential>
                </antcontrib:outofdate>
            </antcontrib:then>
        </antcontrib:if>

        <!-- Test classes -->
        <antcontrib:if>
            <available file="src/test" type="dir"/>
            <antcontrib:then>
                <antcontrib:outofdate>
                    <sourcefiles>
                        <fileset dir="src/test">
                            <include name="**/*.java"/>
                            <exclude name="**/package-info.java"/>
                        </fileset>
                    </sourcefiles>
                    <mapper type="glob" dir="src/test" from="*.java" to="build/test/*.class"/>
                    <sequential>
                        <mkdir dir="build/test"/>
                        <dellroad:javac-default srcdir="src/test" destdir="build/test">
                            <classpath path="build/classes"/>
                            <classpath refid="javac.classpath"/>
                            <classpath refid="testng.classpath"/>
                        </dellroad:javac-default>
                    </sequential>
                </antcontrib:outofdate>
            </antcontrib:then>
        </antcontrib:if>
        <property name="javac.completed" value="true"/>
    </target>
    <target name="javac-project"/>

    <target name="diag">
        <diagnostics/>
    </target>

    <!-- Application should override -->
    <target name="javac.classpath"/>

</project>

